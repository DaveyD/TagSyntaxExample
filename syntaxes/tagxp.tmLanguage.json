{
	"fileTypes": ["prg"],
	"foldingStartMarker": "^\\s*(?i:(func|function))\\s*.*$",
	"foldingStopMarker": "^\\s*(?i:(end func|end function))\\s*.*$",
	"name": "tagxp",
	"patterns": [
		{	"name": "meta.comment",
			"match": "(;)(.*)$",
			"captures": {
				"1": { "name": "punctuation.definition.comment" },
				"2": { "name": "comment.line" }
			}
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{	"name": "meta.function",
			"match": "^\\s*((?i:function|func))\\s*([a-zA-Z_]\\w*)\\s*(\\()([^)]*)(\\)).*\\n?",
			"captures": {
				"1": { "name": "storage.type.function" },
				"2": { "name": "entity.name.function" },
				"3": { "name": "punctuation.definition.parameters" },
				"4": { "name": "variable.parameter.function" },
				"5": { "name": "punctuation.definition.parameters" }
			}
		},
		{	"name": "storage.type.function",
			"match": "^\\s*((?i:end function|end func))\\s*\\n?"
		},
		{	"name": "meta.type",
			"match": "^\\s*(?i:(int|string|real|select|pointer|byte|boolean))\\s*(.*)$",
			"captures": {
				"1": { "name": "storage.type" },
				"2": { "name": "variable.other" }
			}
		},
		{	"name": "variable.other",
			"match": "([a-zA-Z_]\\w*)\\s*(?=(:=|=))"
		},
		{	"name": "keyword.control",
			"match": "\\b(?i:if|then|end if|else|for|while|do|end while|end for|break|continue|do|goto|return)\\b"
		},
		{	"name": "support.function",
			"match": "\\s(?i:(sizeof|len|range|tail|descend|StartLine|EndLine|NextLine|TopPage|BotPage|PrevPage|NextPage|SetSel|FindPage|chr|fail|odd|NumToHeb|ModalDlg|SetDlgText|GetDlgText|SetCheck|GetCheck|var|GetSel|GetKeyValue|IsGlobal|asc|depth|LineCount|find|replace|FindTag|rFindTag|GetTagIndex|GetTagTable|StartPara|NextPara|FindBreak|GetPage|GetAttr|GetPasteInfo|ActiveText|IsFile|GetFileString|SetFileString|GetVarName|GetSystemMetrics|OneStep|ReplaceTag|GetStyleName|xdist|tightness|SetPenalty|BreakPenalty|GetRegistration|LibFunc|exec|wait|GetFileName|ActivePage|GetDate|GetTime|ObjectChanged|sqrt|GetNoteModulus|GetProp|SetDlgScript|DlgEnable|SetDlgFocus|GetDlgFocus|DlgHit|GetWindowPos|GetTagDir|KeyDown|GetViewSel|function|CopyArray|FillArray|FindOptions|rdec))"
		},
		{	"name": "constant.character.escape",
			"match": "\\."
		},
		{	"name": "storage.modifier",
			"match": "\\b(const)\\b"
		},
		{	"name": "storage.modifier",
			"match": "\\b(?i:(true|false))\\b"
		}

	],
	"repository": {
		"line_continuation_character": {
			"patterns": [
				{	"match": "(\\\\)\\n",
					"captures": {
						"1": { "name": "constant.character.escape.line-continuation" }
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{	"name": "keyword.operator.assignment",
					"match": "\\:=|\\+=|\\-=|\\*=|\\/="
				},
				{	"name": "keyword.operator.arithmetic",
					"match": "\\+|\\-|\\*|\\/"
				},
				{	"name": "keyword.operator.word",
					"match": "\\s(and|or|not|mod)\\s"
				},
				{	"name": "keyword.operator.comparison",
					"match": "=|<>|<=|>="
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b(([0-9]([0-9]*[0-9])?\\.?[0-9]*([0-9]*[0-9])?)|(\\.[0-9]([0-9]*[0-9])?))\\b",
					"name": "constant.numeric"
				}
			]
		},
		"strings": {
			"patterns": [
				{	"begin": "\"",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.string.begin" }
					},
					"end": "\"",
					"endCaptures": {
						"0": { "name": "punctuation.definition.string.end" }
					},
					"name": "string.quoted.double.c",
					"patterns": [
						{	"include": "#string_escaped_char" },
						{	"include": "#line_continuation_character" }
					]
				},
				{	"begin": "'",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.string.begin" }
					},
					"end": "'",
					"endCaptures": {
						"0": { "name": "punctuation.definition.string.end" }
					},
					"name": "string.quoted.single.c"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape"
				}
			]
		}
	},
	"scopeName": "source.tagxp"
}